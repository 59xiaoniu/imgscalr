package com.thebuzzmedia.imgscalr.ext;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExifTool {
	public static final Boolean DEBUG = Boolean
			.getBoolean("imgscalr.ext.exiftool.debug");

	public static final String EXIF_TOOL_PATH = System.getProperty(
			"imgscalr.ext.exiftool.path", "exiftool");

	/**
	 * Prefix to every log message this library logs. Using a well-defined
	 * prefix helps make it easier both visually and programmatically to scan
	 * log files for messages produced by this library.
	 * <p/>
	 * The value is "[imgscalr] " (including the space).
	 */
	public static final String LOG_PREFIX = "[imgscalr.ext.exiftool] ";

	public static final Map<Tag, String> EMPTY_MAP = Collections.emptyMap();

	/**
	 * Enum used to specify the different supported tags that can be extracted
	 * from an image using ExifTool.
	 * 
	 * @see <a
	 *      href="http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/index.html">Full
	 *      Tag List</a>
	 */
	public enum Tag {
		ISO("-ISO"), APERTURE("-ApertureValue"), SHUTTER_SPEED(
				"-ShutterSpeedValue"), FOCAL_LENGTH("-FocalLength"), EXPOSURE_COMPENSATION(
				"-ExposureCompensation"), EXPOSURE_PROGRAM("-ExposureProgram"), ORIENTATION(
				"-Orientation"), MAKE("-Make"), MODEL("-Model"), TITLE(
				"-XPTitle"), AUTHOR("-XPAuthor"), SUBJECT("-XPSubject"), KEYWORDS(
				"-XPKeywords"), COMMENT("-XPComment"), RATING("-Rating"), RATING_PERCENT(
				"-RatingPercent"), GPS_LATITUDE("-GPSLatitude"), GPS_LATITUDE_REF(
				"-GPSLatitudeRef"), GPS_LONGITUDE("-GPSLongitude"), GPS_LONGITUDE_REF(
				"-GPSLongitudeRef"), GPS_ALTITUDE("-GPSAltitude"), GPS_ALTITUDE_REF(
				"-GPSAltitudeRef"), GPS_SPEED("-GPSSpeed"), GPS_SPEED_REF(
				"-GPSSpeedRef"), GPS_PROCESS_METHOD("-GPSProcessingMethod"), GPS_BEARING(
				"-GPSDestBearing"), GPS_BEARING_REF("-GPSDestBearingRef"), DATE_TIME_ORIGINAL(
				"-DateTimeOriginal");

		private String name;

		private Tag(String name) {
			this.name = name;
		}
	}

	public static Map<Tag, String> getImageMeta(File image, Tag... tags)
			throws IllegalArgumentException {
		if (image == null)
			throw new IllegalArgumentException("image cannot be null");
		if (!image.canRead())
			throw new SecurityException(
					"Insufficient permissions to read given image: "
							+ image.getAbsolutePath());

		long startTime = System.currentTimeMillis();
		Map<Tag, String> resultMap = EMPTY_MAP;

		if (tags != null && tags.length > 0) {
			List<String> args = new ArrayList<String>();
			args.add(EXIF_TOOL_PATH);
			args.add("-S");
			args.add("-n");

			for (int i = 0; i < tags.length; i++)
				args.add(tags[i].name);

			args.add(image.getAbsolutePath());

			try {
				// Execute the command
				Process proc = new ProcessBuilder(args).start();
				BufferedReader reader = new BufferedReader(
						new InputStreamReader(proc.getInputStream()));

				/*
				 * TODO: Implement a more robust and efficient parsing method
				 * using a char[] buffer and manual index chopping; avoid regex
				 * and String creation/splitting.
				 */

				String line = null;

				while ((line = reader.readLine()) != null) {
					System.out.println("> " + line);
				}

				// Prepare the result map.
				resultMap = new HashMap<ExifTool.Tag, String>(tags.length * 3);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		if (DEBUG)
			log("Processed '%s' in %d ms [queried %d tags, found %d values]",
					image.getAbsolutePath(),
					(System.currentTimeMillis() - startTime), tags.length,
					resultMap.size());

		return resultMap;
	}

	/**
	 * Helper method used to ensure a message is loggable before it is logged
	 * and then pre-pend a universal prefix to all log messages generated by
	 * this library to make the log entries easy to parse visually or
	 * programmatically.
	 * <p/>
	 * If a message cannot be logged (logging is disabled) then this method
	 * returns immediately.
	 * <p/>
	 * <strong>NOTE</strong>: Because Java will auto-box primitive arguments
	 * into Objects when building out the <code>params</code> array, care should
	 * be taken not to call this method with primitive values unless
	 * {@link #DEBUG} is <code>true</code>; otherwise the VM will be spending
	 * time performing unnecessary auto-boxing calculations.
	 * 
	 * @param message
	 *            The log message in <a href=
	 *            "http://download.oracle.com/javase/6/docs/api/java/util/Formatter.html#syntax"
	 *            >format string syntax</a> that will be logged.
	 * @param params
	 *            The parameters that will be swapped into all the place holders
	 *            in the original messages before being logged.
	 * 
	 * @see #LOG_PREFIX
	 */
	protected static void log(String message, Object... params) {
		if (DEBUG)
			System.out.printf(LOG_PREFIX + message + '\n', params);
	}
}